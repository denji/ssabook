SSA-graph chapter review (7th may version)
François Gindraud

/!\ You should see this document in a monospace font, ascii art is used /!\

--------------------------------

1.2 :
-	How does it handle loops ?

>> Je ne comprends pas ce point.

1.3 :
-	1st § :
	« The edges TO a vertex represents the arguments [...] the edge FROM a vertex represents the results [...] »
	As edges go from uses to definition, you should swap TO and FROM in this sentence.

>> I think you had the wrong version???

-	2nd § :
	You can view « state edges » as a data dependency on an « abstract data handler » (for example, the address representing the memory location)

>> What is the advantage of this abstract data handler (we should add a dependence edge, state edge or whatever you want to call it between any two instructions in sequence in the initial program that have borders effects not handled by our representation. This is not restricted to memory accesses)?

-	fig 1.1 :
	I don't have the input code for the ssa (maybe in the previous chapter ?), I will assume it is a CFG like this :

*-------*
| a = 0 |
| i = 0 |
*-------*
  |
  v           
*-----------* 
| a *= i    |<--\
| i++       |   |
| if(i<100) |   |
*-----------*   |
  |       |     |
  | F     \_____/
  |         T
  v
*-------------*
| print (a+i) |
*-------------*

There is only one definition of 'a' and 'i' reaching the last bloc, so there should not be any phi-function at the entry of this bloc.
In the SSA code, you added one for each variable, but we always have a3=a2 and i3=i2.

In the corresponding SSA-graph there is another error (typo) : each of these two phi-functions are written like this : « a1 = phi(a1, a2) » (resp. with 'i'), but it should be "a3" (resp. "i3").
But as I said before, these two phi functions are uneeded, so they should not be in the SSA graph either.

>> Ok

1.4 :
-	2nd § / Fig 1.2 :
	Clash between text and figure :
	-	Text says : dashed edges for control, solid edges for data.
	-	It is obviously the opposite in the figure.

>> Ok

-	3rd § :
	I would add the fact that the ENTRY node is there to be the root of the CDG, allowing each CFG node to have a control dependence ancestor (thus avoiding some special cases in algorithms).

>> This was in paragraph 1... No?

1.5 :
-	phi_entry/phi_exit :
	You should highlight that the predicate is the same, and give some short semantics. It's just a splitted version of the VSDG gamma node, and is very similar.

>> You mean teta node.
>> Actually phi_entry does not have any predicate. This is not very clear why. In practice, my understanding is that for most implementations there is a mechanism that releases the phi_entry as soon as the associated phi_exit is fulfilled. I prefered to stick on what is in the litterature as I don't master it enough. But maybe we could add a short footnote.  

-	3rd § :
	nested phi-if gating functions :
	In unstructured CFGs, theses functions can become hard to represent, being a DAG (and not tree), including some "undef" values. These values are created in cases like this :

           a = b
           if Q
        T /    \
         /      |
      a = c     | F
      if P      |
    T /  \ F   /
     /    \   /
    ..    gamma(Q, gamma(P, undef, c), b)

>> It depends on the flavor actually. If you look at Havlak's construction algorithm (For Thinned GSA) there will be no undef. You will get gamma(Q, c, b) only which is sufficient on most cases. Not clear if we should detail this point without taking the risk of confusing the reader.

1.7 :
-	last § :
	I would personnaly insist on the fact that semantics is very important, but often not given in IR articles.
	For example, in any graph-IR, what is the semantics of an edge ?
	Of course the most used is the buffer one, but it is not the only one which can be used :
	I've read an article about the PDW (program dependence web), which proposed 3 different semantics (in particular for edges) for the same IR.

>> We should discuss this point because I want to make sure what you mean by "semantics". Did you see any papers that address this point. Such as the equivalence between different semantics?


	I also think that an IR with an executable semantics is easier to understand, although the complete information make examples grow bigger.
	And we should be able to verify that each step of optimisations modifications preserve the program semantics (at least we have all information), so there should be less human error.

>> This is a very good point. I am not sure those people do any transformations. This seems to be really analysis/interpretation directed. 

----------------------------

I only highlighted errors and where you could add some precisions.

The chapter is globally good.
Sometimes I think it tries to go deep into some IRs with few text, which do not bothers me as I made an internship on IRs, but should take a bit longer to read for non IR specalists.

I appreciated the parts were you show some specific optimisations with specific IRs.
It reminds that IRs were built to help specific optimisations, and that an IR is chosen for the optimisations it supports and makes easier.

