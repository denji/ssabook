Dear James,

attached is my review for your chapter (state txt file + pdf with annotations).

I CC Philip and Pedro concerning the PDG/CDG, DFG, & GSA representations.

- you need to use the same GSA representation in the two chapters
- I would like to see described in the chapter the PDG (&CDG) and DFG so as to fit the requirements of a chapter on graph representations. i suggest that you co-author this chapter with Pedro so that he takes care of the description of these additional representations. Concerning the DFG, you may ask Andre (who is taking care of the SSI section and will talk about live-range splitting that deals with conditionals) and Benoit to provide you with their understanding of why DFG might be useful.

Please, do not hesitate to ask me for any precision concerning my review, if some points are not clear. Note that I am working on the book only on Thursday and Friday, so do not be surprised if I do not answer straight after your post.

regards
thanks for your contribution
fab

----------------------------

- We do not see the difference between SSA graph and SSA (where use-def chains are implicit).

- GSA is described.
  - I want the hardware chapter and this chapter use the same GSA. Do not mind which one.
  - A concret example is missing to illustrate its usefulness versus SSA+CFG.
  - I do not understand why mu does not contain the predicate has an argument. The handling of loop should be explained. It seems important for me.
  - It would be helpful to have the intuition how gating functions are computed. In particular it is not clear whether the predicate can always be computed. If not how it is handled? 

- GSA is roughly described (it seems that the goal was to introduce gating functions); TGSA is mentioned but not described; VDG is mentioned but the description does not allow to understand what's going on; VSDG is described.
  - Either you focus on VSDG and from the begining describe VSDG (against SSA+CFG). At the end make a section providing related representations, references and discussions.
  - Or you describe (with enough details) each representation, give a motivating examples of one toward another. I do not care about a representation that is completely subsumed by another (eg see discussion below concerning VDG)
  - I would prefer the second solution including a description of:
    - PDG (+CDG) (we need to understand on an example the difference of use between CDG and gating functions). Only yhe intuitions of how CDG is built is useful.
    - DFG: same remark than for PDG
    - Cliff Click's representation. You wanted initialy to present it. Is it interesting?
    - GSA is required by hardware chapter
    - TGSA: Is it interesting rep?
    - VDG??? 
  - In all cases, we need motivating examples and comparisions between described solutions (at least SSA graph, GSA and VSDG)

- What is the main difference between VDG and VSDG. The name would suggest that there is no "state" notion in VDG while it does not seems to be the case. It looks like VDG has only some kind of "state" dependences that may be considered has value dependences when pointing to a "primop". So the main difference (as I understand) is a more "simple" semantic for VSDG, and the Delta node tha "solves" the termination problem & allows loop optimizations. Am I correct? Does the way of representing loops using call on VDG has some advantages? If not we may not talk about VDG at all?

- Concerning the style, I prefer to see references for further reading in a very last section (as in textbooks). The main part should be self
  content (do not refer to any notion eg dependence web without describing it. Otherwise, refer it in the very last section). Hence, either you take the time to describe a representation, or you wait the really last section to talk about it.
