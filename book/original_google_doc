SSA book:

Legend:
Names with ? are unconfirmed.
(O): possible overlap between chapters


Foreword: (Zadeck)


Preface

    * Roadmap - for students, compiler engineers, etc
    * Pre-requisites for reading this book (Tiger book, dragon book, muchnick, etc)?


Part 1: Vanilla SSA (Editor: Jeremy Singer)
(tutorial style - not too heavy)

1. Introduction:

    * brief history
    * definition
    * informal semantics (with examples)
    * motivation
    * comparison with dataflow analysis (high level overview of DFA)


2. Properties and flavours: Philip Brisk

    * dominance
    * liveness
    * interference graphs
    * SSA with dominance property
    * pruned/semi-pruned/minimal
    * conventional


3. Classical Construction Algorithm (very very readable)

    * for simple programming language model
    * toplas 91 (not simplest, but gets ready for repair/maintain section)
    * destruction
    * turning general SSA into conventional/pruned/dominance property


3'. Alternative SSA construction algorithms

    * Using DJ graphs for SSA construction
    * advanced SSA destruction algorithms


4. repair/maintain SSA after optimization

    * simple code motion example
    * simple algorithm when adding new definitions...
    * particularly after if(0) or if (1) (see SCCP section in part 3)
    * unreachable code eliminition


5. Semantics (Experts only) (Mycroft?)

    * 5 pages total
    * operational semantics by Glesner et al, TU Berlin
    * denotational semantics by Pop et al
    * Equivalence with Continuation passing style



Part 2: Extensions (Editor: Vivek Sarkar)
 - Aimed at expert, but with a track for beginners)

    * Handling memory
          o Array SSA (Knobe?, Sarkar)
          o HSSA (Massimiliano Mantione)
          o Extended SSA Numbering (Lapkowski?, Hendren?)
          o Experience reports
                + Memory SSA with GCC (Novillo)
                + PHP experience report (Biggar)
    * Concurrent SSA (Midkiff?, Padua?, Lee?, Novillo, Wolfe?)
    * SSI (Singer)
    * SSRO (Brisk)
    * Psi-SSA (De Ferriere)
    * VSDG - including Gated SSA and predicated SSA (Stannier, Mycroft)
    * Dynamic Single Assignment?
    * Sigma-SSA?


Part 3: Analysis (Editor: Alan Mycroft)

    * Analysis
          o machine independent
                + Things that must be mentioned in the chapters below:
                      # benefits of SSA
                            * properties: x_i representation can use dense vector, vs DF needs (x,PP) needs hashtable
                            * phi node construction precomputes DF merge
                            * dominance properties imply that simple forward analysis works
                      # Flow insensitive somewhat improved by SSA
                            * building defuse chains: for each SSA variable can get pointer to next var
                            * improves SSA DF-propagation


                + constant propagation is easier - tutorial (Novillo)
                      # SSA names improves DF propagation
                      # sparseness gives speed
                      # GVN
                + ADCE (Novillo)
                + SSA tells nothing of liveness (need to discuss) (Rastello)
                      # liveness analysis




                + additional gain from Psi-SSI (De Ferriere) (O)
                + alias analysis (Lhotak? (backup: Novillo will ask Berlin))
                + bitwidth analysis/value-range analysis (Brisk)
                + loop tree (S. Pop)
                      # finding induction variables (Pop)
                      # can be discovered from SSA very simply
                + Counter-example:
                      # PRE not helped (Knoop)




                + Throw away remarks:
                      # what structural invariants does SSA provide for analysis (Majumdar? ask Palsberg to ask him)
                      # available expressions become available values
                      # split the analyses between algorithms that need kill calculation and those that dont?
                      # bidirectional (but dont discuss SSI)


          o applications:
                + software engineering
                + program comprehension
                + compilation
                + decompilation (Guillon)
                + bug finding
                + security
                + typestate analysis (Lhotak)



Part 4: Machine dependent Optimization/Codegen (Editor: Sebastian Hack)

    * Style:
          o Instructive
          o No performance results
          o try for 10 pages max per section
    * Intro (Hack)
          o overview
          o phase ordering problem
          o modelling instruction effects in SSA
    * register allocation (Hack)
    * scheduling (1/2 - 1 page) (Ertl)
          o ssa has no ordering
          o phase ordering
          o sequencing
    * code selection (Krall, Ebner, Scholz?)
    * Automatic Parallelization/Sequencialization (Pop)
    * if conversion (Bruel)
    * hardware compilation (Brisk)
    * JITs (Efficient Optimizations) (Wimmer?)
    * predicated code (Guillon) (O)




Appendices:

    * Dominance
    * Dominance frontier
    * Critical edges
    * DJ Graphs - background, definition, etc
    * Chordal Graphs
    * other graphs
    * abnormal edges




Time line:

8 May: Infrastructure

15 June:

    * Decide Publisher
    * outline/summary/abstract from each chapter level


1 Dec:

    * Final (unmerged) chapters

