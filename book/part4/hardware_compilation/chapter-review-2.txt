1. As we do not want _any_ citation in the main body, I moved all of them in the last section (Further reading) that should be merged with the previous concluding section that presented existing tools.




2. I have directly fixed the few typos I found, I am attaching the latex-diff to this email. _Please_ check that I did not insert any new bug.
Amoung others I would like you to put special attention to the following points:
  - you say
    "Similarly, the more classical compiler representations,
     using three-address instructions augmented with the def-use chains includes, in
     reality, the same information as the SSA-based representation. In the later however,
     and as we will explore in the next section, facilitates the mapping and selection of
     hardware resources.".
I rephrased into
    "Similarly, the more classical compiler representations, using three-address
     instructions augmented with the {\em def-use} chains already exposes the data-flow
     information as for the SSA-based representation. The later ... "
as SSA is more expressive than def-use chains. Please check.

- I thought it would be helpful, but (remove it if you think this is useless and correct it if I wrote it wrongly) I added a footnote explaining FPGA. "Field-Programmable Gate Arrays are layers of two dimensional topology integrated circuits designed to be configurable after manufacturing"

- I rephrased the following sentence that was completely bugus:
    "As the names associated with each value correspond to the
    precise value (with the correct number index) used in the predicate evaluation this
    variant of the SSA form is particularly useful for hardware synthesis...."
into:
    "As the variable name associated with each gating predicate fulfill the referential transparency
    as any of the SSA    variables,
    this variant of the SSA form is particularly useful for hardware synthesis.
    The generation of the hardware circuit simply uses the
    register that holds the corresponding variable's version value of the predicate,
    as opposed
    to the base name of the variable as this might have been assigned a
    value that does not correspond to the actual value used in the predicate."
Please rephrase if necessary.





3. There is still this pending TODO concerning gated-SSA. Currently your gated-SSA exemple contains only one if-then-else. So you could use a gamma notation and simply recall in the text that as  explained in the vsdg chapter gamma is roughly a phi with a gate. Then I think that this section deserves more details espetially the PDG that seems to me to be the more natural way to implement it. Following are some notes that I took when reading this section. Let us iterate on it please to decide if anything could be done.

**** The example of Figure 1.5 corresponds to a simple if-then-else. So the predicate in the gate simply corresponds to the predicate of the if. What do you do when you have more complex CFG? Do you calculate a predicate expression
that you try to simplify and compute this expression? Do you implement it as in the pure gated-SSA using tree of 2-arity gates?
For me, the naive approach that would simply execute the control itself (you have one variable per basic block, when you branch to it, you set it to one, and release it when the gates of the successor have been consumed) seems more efficient that those gates. Then control dependences can be used to compute those variables more efficiently.
Isn't it a mixed between control dependence and gated SSA that you are using instead of PDG?





4. + a few minor points as listed below:
- If you confirm that the overall time for Fig 1(c) is longer than the overtime for Fig 1(b) (clock cycle time is not 3 times longer for 1(b) but less) then could you mention it?

- you say "Using separate registers for disjoint live ranges, allows hardware generation
to  reduce the amount of resources in multiplexer circuits, for example." This is not clear what you mean here. Is it the parallel to the advantage for data flow analysis that I pointed out in section 1 of chapter properties and flavors (def-use chains) that I illustrated using the example du.pdf attached to this email? If yes, you could make the parallel and add a cross reference. If no, could you explain me what you mean please?

- you say "Exposes the potential for the sharing of hardware register not only in
time and but also in space providing insights for the high-level synthesis
steps of allocation, binding and scheduling.". Do you oppose this to the extreme approach that would create a register for every live variable at each CFG node boundary? If I understand well maybe you could add a forward reference to the section "BB mapping" here.

- In figure 1.4c you say the number of multuiplexors is minimal. If you take the double-diamond example of the attached to this email (given in chapter properties and flavors) then SSA (because it uses the dominance frontier and not the join sets) does not lead to minimal number of phi functions. Also, you need not to allow to perform any code transformation such as copy propagation that could remove some phi functions... As soon as you talk about minimality you need to be careful. Maybe you can say that roughly speaking this is minimal under the same asumptions than
minimal SSA leads to a minimum number of phis.


