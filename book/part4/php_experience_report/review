I have only minor changes that would be required. Still I will do a more precise and exhaustive review after the following have been changed:
- figures are missing: use latex command \includegraphics \label & \ref
- sections 1 & 2 are redundant and can be merged. Should be replaced by a section "introduction"
- detail a little bit more what is address taken alias analysis ( a few more sentences). I do not see what makes it simpler than some other analysis.
- what do you mean by SCCP algorithm (sparse forward propagation)?
- I think when you say you need def-use chains yo umean def/use sets: for a given variable you want the set of definition and use points? Def-use chains is for each def the set of uses. Without SSA def-use chains can be computed using data-flow. 
- I do not find the discussion about having zero versioning or not to be useful
- Why would string analysis would be helpful? Do you have some kind of information (constraint on the name of the variable the user is gonna type)? I do not understand this point
- Apparently paragraph 3.7 is incomplete
- I do not understand what you mean by overlapping live-ranges.
- what is CCP form. You mean forward interprocedural data-flow analysis?
- when you say "the whole program analysis described above" you mean the alias/type/constant analysis. Only alias analysis necessary to build SSA form, no? It is not possible to make it sparse?
- It would be nice if you think it is possible to have in the last paragraph some references to related work/results
