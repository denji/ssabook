From Chistian Wimmer:
Introduction:

* "Scripting languages": I don't like the term "scripting languages", it implies that these are not real languages for real applications. I would change it to "dynamic languages" everywhere.

* "Twitter" is written in Java and Scala (the server side), so it is a bad example.
* "strong support from browsers and ... back-end databases". That is a mixture of client and server technologies. Maybe the whole paragraph is a bit too informal.

* "interpreted execution" is not a language feature, but a way to implement a language. The chapter is about a compiler for PHP - "interpreted execution" is a contradiction to that.

* "run-time code generation": I first read that as "with jit compilation", and only later realized that you mean, e.g., the eval() functionality here.


PHP and Aliasing:

* Figure 25.4: what does the method name "snd" mean? It looks more like a synthetic method, so I would call it "foo"

* "this would leave no variables available": This statement is too strong, it only holds for your small example. In a real method, there should be many (or at least some) local variables where the compiler can easily prove that no aliasing happens. 


Our whole-program analysis:

* Your analysis algorithm is quite different to SCCP, so I am not sure it makes sense to call it "similar in principle". It does not even operate on SSA form.

* How do you handle recursive methods? The simple worklist-approach does not terminate in this case, and I don't see an obvious way to cut off the recursive calls.

* def-use set building algorithm: The $x''s is confusing, you have to look very closely to see that the ' are actually different. Rewrite it so that you don't need the "'s" suffix.

* Footnote 2: It is a complicated sentence, but I am quite sure that there is either a "not" too many or a "not" missing ("variable is _not_ defined"). Please simplify this sentence.

* In summary, this section talks about all the supplementary analysis that is necessary for PHP, but not about the actual SSA form construction. You just say "we use a variation of HSSA". Since this is a book about SSA form, I would have expected more about your actual SSA form representation (even when it builds on concepts that were introduced in earlier chapters).


Discussion:

* "traditional static languages": Why do you call static languages "traditional"? Dynamic languages have been around for a very long time.

* "The complexity of building SSA for PHP suggests that we are unlikely to see SSA used in just-in-time (JIT) compilers for PHP soon": This is a wrong conclusion. In this chapter, you correctly show that many PHP features are difficult to handle in a static compiler, because statically you don't know what will be executed and have to make the worst-case assumption. However, JIT compilers have a) actual run-time profiling information available and b) can speculate that certain things don't happen. If they speculate too aggressively, it is possible to deoptimize, i.e., go back to interpreted execution. Therefore, JIT compilers do not have to deal with all the complicated features.
In the example you introduced in Figure 25.4, the profiling information tells the JIT compiler that the method was, e.g., never called with reference variables, or called with $x and $y referencing the same variable. It can then create the same optimized code that the C compiler in your example would create. The only thing necessary is a lightweight guard at the beginning of the method, checking that the assumed input really matches the actual input.
So in summary, do not generalize from static compilers to JIT compilers. Or say that JIT compilers are a way to solve these problems.
 

The whole chapter needs careful proofreading. I spotted many typos, which makes the chapter difficult to read.

