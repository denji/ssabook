
> Introduction:
>
>
> * "Scripting languages": I don't like the term "scripting
>    languages", it implies that these are not real languages for real
>    applications. I would change it to "dynamic languages" everywhere.

It is definitely the case that most scipting languages are examples of
dynamic languages. However, the term "scripting language" has been
ubiquitous and universally accepted for at least two decades now. The
term "dynamic language" also has a clear and widely accepted meaning
that is different from "scripting language" (although almost all
scripting languages are dynamic languages). In order to avoid
confusing readers, we continue to use the terms "scripting language",
but we describe them as "dynamic scripting languages" to make it clear
that they exhibit a lot of dynamic behaviour. We has also added an
additional paragraph to section 1 explaining this.


> * "Twitter" is written in Java and Scala (the server side), so it is
>    a bad example.

Yes. Twitter was originally written in Ruby on Rails. But as you point
out more recently it has been rewritten in Java and Scala. Since the
rewrite this has become a bad example, so we have removed it.

> * "strong support from browsers and ... back-end databases". That is
>    a mixture of client and server technologies. Maybe the whole
>    paragraph is a bit too informal.

We have rephrased this to distinguish more clearly between client and
server technologies.

> * "interpreted execution" is not a language feature, but a way to
>    implement a language. The chapter is about a compiler for PHP -
>    "interpreted execution" is a contradiction to that.

Yes, you are correct. However, the implementation technology that is
used to implement a language can have an enormous impact on the design
of the language.  So designers will put features into a language that
is intended to be interpreted that they would never dream of putting
into a language that is intended to be compiled. We have removed
"interpreted execution" from the list of language features, and added
a new sentence about the influence of the first implementations of
dynamic scripting languages being interpreted later in section 1.

> * "run-time code generation": I first read that as "with jit
>    compilation", and only later realized that you mean, e.g., the
>    eval() functionality here.

We have reworded this to make it clearer that this refers to source
code which is generated at run time and then executed.

> PHP and Aliasing:
>
> * Figure 25.4: what does the method name "snd" mean? It looks more
>    like a synthetic method, so I would call it "foo"

We have changed this to "foo".


> * "this would leave no variables available": This statement is too
>    strong, it only holds for your small example. In a real method,
>    there should be many (or at least some) local variables where the
>    compiler can easily prove that no aliasing happens.

Yes, you are right. Although it is almost impossible to say anything
about the aliasing of parameters without an inteprocedural analysis,
it is easier to determine whether a reference has been taken to a
local variable. Unfortunately, other PHP features, such as variable
variables are also problematic. We have added a brief explanation and
a forward reference to the section where we discuss some of these
other difficult language features.

> Our whole-program analysis:
>
> * Your analysis algorithm is quite different to SCCP, so I am not
>    sure it makes sense to call it "similar in principle". It does
>    not even operate on SSA form.

We base our analysis on SCCP, CCP, and Lenart's SCCP-based type-inference
algorithm.

This algorithm is not in SSA form, and is more similar to CCP than SCCP in
that regard. However, the reader cannot be expected to know the CCP
algorithm, which is relatively obscure. The SCCP algorithm, however, is
well-known, and is also presented earlier in the book.

Given that the basic approach -- a symbolic analysis where constants are
used to resolve branches, leading to an iterative analysis  --- is the
same, we believe that a reader who grasped the SCCP algorithm will have
little difficulty with ours.

We refer the reader to Pioli's CCP paper too. However, CCP is
not presented in the book, and a working knowledge of CCP is not 
expected of the reader.


> * How do you handle recursive methods? The simple worklist-approach
>    does not terminate in this case, and I don't see an obvious way to
>    cut off the recursive calls.

Our research did not solve this problem. We believe it would be
straightforward to implement a time- or depth-based approach, but did not
implement it ourselves. We experienced the problems you would expect as a
result.


> * def-use set building algorithm: The $x''s is confusing, you have
>    to look very closely to see that the ' are actually
>    different. Rewrite it so that you don't need the "'s" suffix.

We have changed x' to x_{alias} to avoid this confusion.

> * Footnote 2: It is a complicated sentence, but I am quite sure that
>    there is either a "not" too many or a "not" missing ("variable
>    is_not_ defined"). Please simplify this sentence.

We have rewritten this sentence as a short paragraph that better
explains may definitions.

> * In summary, this section talks about all the supplementary
>    analysis that is necessary for PHP, but not about the actual SSA
>    form construction. You just say "we use a variation of
>    HSSA". Since this is a book about SSA form, I would have expected
>    more about your actual SSA form representation (even when it
>    builds on concepts that were introduced in earlier chapters).

Our construction of SSA form is uninteresting; however, we made a number
of adaptations of HSSA which the reader should find interesting. We have
added a number of paragraphs discussing how we augment our SSA form with
features from HSSA form, and discuss features from HSSA which we do not use. 

> Discussion:
>
> * "traditional static languages": Why do you call static languages
>    "traditional"? Dynamic languages have been around for a very long
>    time.

It is possible for something to be very old, but not sufficiently
widely used to be traditional. For example, the ancient Romans used
concrete in their buildings. But we do not consider concrete to be a
traditional material, because it is only more recently that its use
has become widespread.

We have reviewed each use of the word "traditional" in the text,
and in all cases but one we have replaced it with a more specific
word.

> * "The complexity of building SSA for PHP suggests that we are
>    unlikely to see SSA used in just-in-time (JIT) compilers for PHP
>    soon": This is a wrong conclusion. In this chapter, you correctly
>    show that many PHP features are difficult to handle in a static
>    compiler, because statically you don't know what will be executed
>    and have to make the worst-case assumption. However, JIT compilers
>    have a) actual run-time profiling information available and b) can
>    speculate that certain things don't happen. If they speculate too
>    aggressively, it is possible to deoptimize, i.e., go back to
>    interpreted execution. Therefore, JIT compilers do not have to
>    deal with all the complicated features.

Yes. A JIT compiler can implement these sort of speculative
optimizations and detect and recover from misspeculation. An ahead of
time compiler could do something similar by creating multiple versions
of the code. We have therefore removed this paragraph.

> In the example you introduced in Figure 25.4, the profiling
>  information tells the JIT compiler that the method was, e.g., never
>  called with reference variables, or called with $x and $y
>  referencing the same variable. It can then create the same optimized
>  code that the C compiler in your example would create. The only
>  thing necessary is a lightweight guard at the beginning of the
>  method, checking that the assumed input really matches the actual
>  input.

Yes, the guard could be implemented by checking whether or not each
parameter is a reference variable. As we mention below, we have
removed our short discussion of JIT compilation because, as you say,
in principle the JIT compiler could do almost any optimization.  We
have removed the paragraph containing these assertions.

> So in summary, do not generalize from static compilers to JIT
>  compilers. Or say that JIT compilers are a way to solve these
>  problems.

We have removed the offending paragraph from the paper, so we no
longer generalize about JIT compilers.

> The whole chapter needs careful proofreading. I spotted many typos,
> which makes the chapter difficult to read.

We have carefully proofread the chapter, and fixed a large number of
spelling and other errors.
