% see also below how beginpgfgraphicnamed..endpgfgraphicnamed is modified
\ifx\onlytikz\@undefined\else
  \def\dousetikz{}
\fi

\newcommand\tikzfigure[1]{%
  \message{^^JDBG: pgfgraphicnamed tikz/#1}%
  \beginpgfgraphicnamed{tikz/#1}%
  {%
    \message{^^JDBG: Direct input of figure #1^^J}
    \shortindexingoff%
    \input{tikz/#1.tikz}%
  }%
\endpgfgraphicnamed%
}%
\newcommand\tikzsubfigure[2][]{%
  \message{^^JDBG: pgfgraphicnamed tikz/#2-#1}%
  \beginpgfgraphicnamed{tikz/#2-#1}%
  {%
    \message{^^JDBG: Direct input of sub-figure #2-#1^^J}
    \shortindexingoff%
    \def\ver{#1}%
    \input{tikz/#2.tikz}%
  }%
  \endpgfgraphicnamed%
}

\newcommand\tikzsubfigures[1]{
  \input{tikz/#1}
}

\newcommand\vone[1]{\ifnum\ver=1#1\fi}
\newcommand\vtwo[1]{\ifnum\ver=2#1\fi}
\newcommand\vchoice[2]{\ifnum\ver=1#1\else#2\fi}
\newcommand\defvstyle[2]{\ifnum\ver=1\def\vstyle{#1}\else\def\vstyle{#2}\fi}

%%
% Code to show the indexes in the margins with tikz, or just the position with 
% a star without tikz
%
\RequirePackage{xcolor}
\colorlet{idxcolor}{blue!50!magenta!60}

\newbox\showidxbox
  \newcommand\simpleshowindex[1]{%
    \sbox\showidxbox{\color{idxcolor}$\star$}%
    \hbox to 0pt{%
      \hspace{-.5\wd\showidxbox}%
      \protect\raisebox{.5em}[0pt][0pt]{%
      \usebox\showidxbox}%
    }%
    %% does not work, not enough courage to debug...
    % \marginnote{\color{idxcolor}\scriptsize #1}%
  }

\ifx\dousetikz\@undefined
  \let\tikzshowindex\simpleshowindex
\else
\colorlet{idxcolorline}{blue!50!magenta!10}
\def\index@margin#1#2#3#4#5{\vbox to 3pt{%
  \begin{tikzpicture}[overlay, remember picture]%
    \node[#1,idxcolor,minimum height=1cm] (idx) at (#2,1ex) {\scriptsize #5};
    \path[draw=idxcolorline] (star) -| ($(idx.#3) + (#4,0)$) -- (idx);
  \end{tikzpicture}%
}}
\newcommand\tikzshowindex[1]{%
  \ifx\@captype\@undefined%
      \begin{tikzpicture}[overlay, remember picture]%
        \node[idxcolor, inner sep=0pt] (star) at (0,.8em)  {$\star$};
      \end{tikzpicture}%
      \marginpar[\index@margin{left}{2.0}{east}{.5}{#1}]%
                {\index@margin{right}{1}{west}{-.5}{#1}}%
  \else%
    \simpleshowindex{#1}%
  \fi%
}
\fi

%% Always include tikz for the ``foreach'' function

% Check if we include tikz or not
\ifx\dousetikz\@undefined
  \long\def\beginpgfgraphicnamed#1#2\endpgfgraphicnamed{\includegraphics{#1}}
  \def\pgfrealjobname#1{}
  \def\pgfsyspdfmark#1#2#3{}
  \RequirePackage{pgffor}
\else


\RequirePackage{tikz}
% tikz does not handle input@path or graphicspath...
\let\pgfutil@IfFileExists\IfFileExists
\let\pgfincludeexternalgraphics\includegraphics

\ifx\onlytikz\@undefined
  \message{^^JDBG: Regular tikz figure handling^^J}
\else
  \message{^^JDBG: using direct tikz code for figures^^J}
  \AtBeginDocument{
    \long\def\beginpgfgraphicnamed#1#2\endpgfgraphicnamed{#2}
  }
\fi

\RequirePackage{xkeyval}
\RequirePackage{textcomp}
%\usepackage{xkeyval}

%\usepackage{pgfplots}

\usetikzlibrary{arrows,shapes}
\usetikzlibrary{calc}
\usetikzlibrary{fit}
\usetikzlibrary{scopes}
\usetikzlibrary{decorations}
\usetikzlibrary{decorations.text}
\usetikzlibrary{decorations.pathmorphing}
\usetikzlibrary{decorations.pathreplacing}
\usetikzlibrary{decorations.fractals}
\usetikzlibrary{chains}
\usetikzlibrary{positioning}
\usetikzlibrary{shadows}
\usetikzlibrary{shadows.blur}
\usetikzlibrary{matrix}
\usetikzlibrary{patterns}
\usetikzlibrary{mindmap}


%% Inputing tikz files
% IMPORTANT NOTE ! for this to work, the input@path must be set at each chapter 
% that uses \input, for instance using the provided command \inputpath from
% headers/macros.tex



\pgfdeclarelayer{background}
\pgfsetlayers{background,main}

\tikzstyle{guide line} = [help lines,black!20]
\tikzstyle{mybraces} = [draw,decorate,decoration={brace,mirror}]

% tables
\foreach \modif/\repw/\reps in {lite /10/15,normal /20/50} {
\foreach \col in {red,green,blue}{
\pgfdeclarepatterninherentlycolored{horizontal lines \modif\col}
{\pgfpointorigin}{\pgfpoint{100pt}{4pt}}
{\pgfpoint{100pt}{4pt}}
{
  \pgfsetfillcolor{\col!\repw}
  \pgfpathrectangle{\pgfpointorigin}{\pgfpoint{100pt}{2.5pt}}
  \pgfusepath{fill}
  \pgfsetfillcolor{\col!\reps}
  \pgfpathrectangle{\pgfpoint{0pt}{2pt}}{\pgfpoint{100pt}{2.5pt}}
  \pgfusepath{fill}
}
}
\foreach \col in {red,green,blue}{
\pgfdeclarepatterninherentlycolored{vertical lines \modif \col}
{\pgfpointorigin}{\pgfpoint{4pt}{10pt}}
{\pgfpoint{4pt}{10pt}}
{
  \pgfsetfillcolor{\col!\repw}
  \pgfpathrectangle{\pgfpointorigin}{\pgfpoint{2.5pt}{10pt}}
  \pgfusepath{fill}
  \pgfsetfillcolor{\col!\reps}
  \pgfpathrectangle{\pgfpoint{2pt}{0pt}}{\pgfpoint{2.5pt}{10pt}}
  \pgfusepath{fill}
}
}
}


%\tikzstyle{npcomplete} = [pattern color=red!20,rounded corners,pattern=north east 
\tikzset{
  npcomplete/.style = {rounded corners,pattern=vertical lines lite red},
  polynomial/.style = {rounded corners,pattern=horizontal lines lite green},
  new result/.style = {draw}
}

\tikzset{labeltoobj/.style={draw,dashed,-latex}}

%\tikzstyle{mylabel} = [pos=0.5, anchor= south]
\tikzstyle{mylabel} = [midway,above=-2pt,sloped]

%% np-completeness proofs
%\tikzstyle{point} = [draw,fill,circle,minimum size=\thetmpp pt,inner sep=0,outer sep=\thetmp]

\tikzstyle{point} = [draw,fill,circle,inner sep=0,outer sep=0 pt,minimum size=6 pt]
\tikzstyle{setpoint} = [draw,fill,circle,inner sep=0,outer sep=0 pt,minimum size=6 pt]

\tikzstyle{myvariable} = [pos=0.5,outer sep=0,inner sep=0]
\tikzstyle{set} = [draw,dashed]
%\tikzstyle{set} = [draw,dashed,decorate,decoration=random steps]%,rounded corners=20]

%% seems unused
% \tikzstyle{selected edge} = [draw,line width=5pt,-,red!50]
\tikzstyle{control dependence} = [draw, dashed, \mycol{2}, shorten >=1pt,  very 
thick]
\tikzstyle{data dependence} = [draw, \mycol{1}, shorten >=1pt,  very thick]

%%%%%
\newcommand{\@color}{black}%
\define@key{mytikz}{color}{\renewcommand{\@color}{#1}}%
\newcommand{\@pos}{.5}%
\define@key{mytikz}{pos}{\renewcommand{\@pos}{#1}}%
\newcommand{\@label}{}%
\define@key{mytikz}{label}{\renewcommand{\@label}{#1}}%
\newcommand{\@shape}{}%
\define@key{mytikz}{shape}{\renewcommand{\@shape}{#1}}%
\newcommand{\@dist}{}%
\define@key{mytikz}{dist}{\renewcommand{\@dist}{#1}}%
\newcommand{\@linestyle}{}%
\define@key{mytikz}{line style}{\renewcommand{\@linestyle}{#1}}%



\presetkeys
        {mytikz}
        {color=black,%
         pos=.5,%
         label=,%
         shape=rectangle,%
         dist=8pt,%
         line style=dashed%
         %
        }
        {}

\newcommand\subpointcover[4][]{
  \setkeys{mytikz}{#1}
  \begin{scope}[color=\@color]
    \ifthenelse{\equal{\@label}{}}{
    \path[set,\@linestyle]
      ($ (#3) ! \@dist ! -90:(#4) $) -- ($(#4) ! \@dist ! 90:(#3)$);
    }{
    \path[set,\@linestyle]
      ($ (#3) ! \@dist ! -90:(#4) $) -- coordinate[pos=\@pos] (y) ($(#4) ! \@dist 
      ! 90:(#3)$) coordinate (z);

    \node at ($(y) ! 20pt ! -90:(z)$) (x) {\@label};
    \draw[-,\@color!50!white] (y) -- (x);
    }

    \path[clip,overlay] % does not count for the bounding box
%    \path[draw,red]
    (current bounding box.south west) rectangle (current bounding box.north east)
    ($(#2) ! 3cm ! 90:(#3)$) --
    ($(#2) ! \@dist ! -90:(#3)$) --
    ($(#3) ! \@dist ! 90:(#2)$) --
    ($ (#3) ! \@dist ! -90:(#4) $) --
    ($(#4) ! \@dist ! 90:(#3)$) -- 
    ($(#4) ! 3cm ! -90:(#3)$) -- 
    cycle;

    \path [set,\@linestyle] (#3) circle (\@dist);
  \end{scope}
}

% arguments are: {set,of,nodes}{label}{place label before}
%\newcommand\pointcover[4][.5]{
\newcommand\pointcover[4][]{
  \edef\prev{0}
  \edef\curr{0}
  \foreach \x in {#2} {
    \xdef\prev{\curr}
    \xdef\curr{\x}
  }
  \foreach \x in {#2} {
    \ifthenelse{\x=#4} {
      \subpointcover[#1,label=#3]{p\prev}{p\curr}{p\x}
    }{
      \subpointcover[#1]{p\prev}{p\curr}{p\x}{#1}
    }
    \xdef\prev{\curr}
    \xdef\curr{\x}
    %\breakforeach
  }
}

\newcommand\gencover[4][]{
  \edef\prev{0}
  \edef\curr{0}
  \foreach \x in {#2} {
    \xdef\prev{\curr}
    \xdef\curr{\x}
  }
  \foreach \x in {#2} {
  \ifthenelse{\equal{\x}{#4}} {
    \subpointcover[#1,label=#3]{\prev}{\curr}{\x}
    }{
      \subpointcover[#1]{\prev}{\curr}{\x}{#1}
    }
    \xdef\prev{\curr}
    \xdef\curr{\x}
    %\breakforeach
  }
}



% Basic blocks
\newcommand{\@bbyshift}{3mm}%
\newcommand{\@bbinityshift}{3mm}%
\newcommand{\setbbyshift}[1]{\renewcommand{\@bbinityshift}{#1}}
\define@key{basic blocks}{yshift}{\renewcommand{\@bbyshift}{#1}}%

\newcommand{\@bblinestyle}{solid}%
\define@key{basic blocks}{style}{\renewcommand{\@bblinestyle}{#1}}%


\presetkeys
        {basic blocks}
        {yshift=\@bbinityshift,%
         style=solid,%
        }
        {}

% Flow graphs

\tikzstyle{basicblock} = [text width=2cm,draw,rounded corners,anchor=north,
minimum height=1ex+\baselineskip]

\tikzset{
    old inner xsep/.estore in=\oldinnerxsep,
    old inner ysep/.estore in=\oldinnerysep,
    double circle/.style 2 args={
        circle,
        old inner xsep=\pgfkeysvalueof{/pgf/inner xsep},
        old inner ysep=\pgfkeysvalueof{/pgf/inner ysep},
        /pgf/inner xsep=\oldinnerxsep+#1,
        /pgf/inner ysep=\oldinnerysep+#1,
        alias=sourcenode,
        append after command={
        let     \p1 = (sourcenode.center),
                \p2 = (sourcenode.east),
                \n1 = {\x2-\x1-#1-0.5*\pgflinewidth}
        in
            node [inner sep=0pt, draw, circle, minimum width=2*\n1,at=(\p1),#2] {}
        }
    }
}


\tikzset{
        generic basic block/.style = {text width=2cm, draw, rounded corners, anchor=north,
          minimum height=1ex+\baselineskip, fill=white
        },
        shaded draw/.style = {draw, blur shadow={shadow blur steps=20}},
        % basic block/.style = {generic basic block, drop shadow},
        basic block/.style = {generic basic block, blur shadow={shadow blur steps=20}},
    % , shadow blur extra rounding=1.3pt }},
        phony block/.style = {generic basic block, draw=none, fill=none},
        open basic block/.style = {text width=1.5cm, minimum height=0cm},
        exit basic block/.style = {basic block,
          % text width=.5cm, minimum height=0cm, anchor=south,
          % regular polygon, regular polygon sides=3,
          % inner sep=-.5cm,
          % minimum height=1cm
          },
        entry basic block/.style = {exit basic block,
          % shape border rotate=180
          },
        source basic block/.style = {text width=1.5cm, minimum height=0cm, anchor=south},
        dest basic block/.style   = {text width=1.5cm, minimum height=0cm, anchor=north},
        ssa node/.style       = {basic block, ellipse, text width=, minimum width=1em},
        predicated node/.style={basic block, diamond, aspect=2, text centered, text width=, minimum width=1em},
        pdg region node/.style= {basic block, ellipse, text width=, minimum width=1em},
        pdg predicate node/.style={basic block, diamond, aspect=2, text centered, text width=, minimum width=1em},
        pdg statement node/.style={basic block,text width=, minimum width=1em},
        vsdg entry node/.style={shaded draw, rectangle split, rectangle split parts=2, rounded corners, anchor=north, fill=white},
        vsdg exit node/.style={isosceles triangle, shape border rotate=-90, shaded draw, isosceles triangle stretches=true, minimum height=1em, minimum width=3em, rounded corners, anchor=north, fill=white, text width=, minimum width=5em},
        vsdg gamma node/.style={double, double distance=1.5pt, shaded draw, circle, anchor=north, fill=white},
        vsdg call node/.style={double, double distance=1.5pt, shaded draw, rectangle, fill=white},
        vsdg const node/.style={shaded draw, circle, anchor=north, fill=white},
        vsdg node/.style={shaded draw, ellipse, text width=, minimum width=1em, fill=white},
        vsdg condition node/.style={shaded draw, diamond, text centered, text width=, minimum width=1em, fill=white},
        vsdg point/.style = {circle,fill,inner sep=1.5pt},
        white edge/.style        = {anchor=mid},
	very thin bb/.style   = {basic block, text width=1cm},
	thin bb/.style        = {basic block, text width=1.5cm},
	normal bb/.style      = {basic block, text width=2cm},
        bb/.style             = {normal bb},
        large bb/.style       = {basic block, text width=2.5cm},
        very large bb/.style  = {basic block, text width=3cm},
        ultra large bb/.style = {basic block, text width=3.5cm},
        bird eye bb/.style = {basic block, text width=},
        bb highlight/.style   = {fill=\mycol{1}},
        cfgnode/.style = {bird eye bb, minimum width=3.3ex},
        cfgnodeh/.style = {cfgnode, thick},
        cfgbe/.style = {flow},
        % vertex/.style = {cfgnode},
        vertex/.style = {bird eye bb,minimum width=3.3ex},
        ehighlight/.style = {preaction={%But before that
          line cap=round,
          draw,\mycol{1},-,% Draw yellow without any arrow head
          double=\mycol{1},
          double distance=9\pgflinewidth,
        }},
%
        flow/.style = {draw,-stealth,rounded corners=2pt,shorten >=1pt},
        cfgedge/.style = {flow},
        back edge/.style={flow,to path={
           -- ++(.5,0) |- (\tikztotarget)
          \tikztonodes }},
        back edge left/.style={flow,to path={
           -- ++(-.5,0) |- (\tikztotarget)
          \tikztonodes }},
        back edge xwidth/.style={flow,to path={
           -- ++(#1,0) |- (\tikztotarget)
          \tikztonodes }},
%
        back loop/.style={flow,to path={++(.25,0) --
          ++(0,-.5) -- ++(2,0) |- ([shift={(.26,.5)}]\tikztotarget)
          \tikztonodes -- ++(0,-.5)}},
%
        back loop xshift/.style={flow,to path={++(#1,0) --
          ++(0,-.5) -- ++(2,0) |- ([shift={(#1,.5)}]\tikztotarget)
          \tikztonodes -- ++(0,-.5)}},
%
        back loop xwidth/.style={flow,to path={++(.25,0) --
          ++(0,-.5) -- ++(#1,0) |- ([shift={(.25,.5)}]\tikztotarget)
          \tikztonodes -- ++(0,-.5)}},
%
          % arguments are {xshift / yshift / xwidth}
        back loop xyw/.style args={#1/#2/#3}{flow,to path={++(#1,0) --
          ++(0,-#2) -- ++(#3,0) |- ([shift={(#1,#2+0.1)}]\tikztotarget)
          \tikztonodes -- ++(0,-#2-0.1)}},
%
        def use/.style = {draw, -stealth,
          dashed, \mycol{1}, shorten >=1pt, very thick,
          },
%
        dominance/.style = {flow},
        loop forest head/.style = {bird eye bb, ellipse, minimum width=3em, minimum height=1.5em},
        loop forest int/.style = {bird eye bb}
}

\newcommand{\mkbasicblock}[5]{
\node[basicblock,text width=#3] (#1) at #2 {
	#5
	};
        \node[xshift=-7,yshift=5] at (#1.north west) {#4};
}



\newcommand\drawsourcebb[2][]{
  \setkeys{basic blocks}{#1}
  \draw[basicblock,\@bblinestyle] ([yshift=\@bbyshift] #2.north west) -- (#2.south west) -- (#2.south east) -- ([yshift=\@bbyshift] #2.north east);
%  \draw[basicblock] (#2.north west) -- (#2.south west) -- (#2.south east) -- (#2.north east);
}
\newcommand\drawdestbb[2][]{
  \setkeys{basic blocks}{#1}
  \draw[basicblock,\@bblinestyle] ([yshift=-\@bbyshift]#2.south west) -- (#2.north west) -- (#2.north east) -- ([yshift=-\@bbyshift]#2.south east);
}

% to write line labels outsize basic blocks
\newcommand\bblinelabel[2]{\mbox{\llap{#1:\kern1ex}#2}}


%% Register transfer graphs
\tikzset{
register/.style = {pointnode,inner sep=0pt,minimum size=4pt},
free register/.style = {draw,circle,inner sep=1pt,minimum size=4pt},
reg transf/.style = {draw,-latex',bend right,shorten >=1pt},
reg self/.style = {reg transf,to path={.. controls +(.5,.75) and +(-.5,.75) ..  (\tikztotarget)}},
reg self arg/.style = {reg transf,to path={.. controls +($#1*(.5,.75)$) and +($#1*(-.5,.75)$) .. (\tikztotarget)}},
}


\newcommand\drawregs[1]{
  \foreach \x in {1,...,#1} {
        \count2=360
        \divide\count2 by #1
        \multiply\count2 by \x
        \node[register,label=\the\count2:$R_\x$] (r\x) at (\the\count2:1) {};
  }
}

\newcommand\drawself[2][1]{
  \path[reg self arg=#1] (#2) to (#2);
}

\newcommand\transf[1]{edge (#1) (#1)}

\newcommand\cycle[2][1]{
        \count1=360
        \divide\count1 by #2
        \count3=0
        \count3=#1
        \advance\count2 by -2
        \foreach \x in {1,...,#2} {
                \global\advance\count3 by \count1
                \count4=#2
                \advance\count4 by -\x
                \node[register,label=\the\count3:$R_\x$] (r\x) at (\the\count3:#1) {};
        }
}



% Interference graphs
%

\tikzstyle{pointnode}=[inner sep=0,minimum size=5pt,fill,circle]
\tikzstyle{varnode}=[inner sep=1pt,minimum size=7pt,rectangle]
\tikzstyle{interf} = [draw,semithick,-]
\tikzstyle{edge} = [interf]
\tikzstyle{affinity} = [draw,semithick,dashed,-]
\tikzstyle{arrow} = [draw,>=triangle 45]
\tikzstyle{fnode} = [shape=ellipse, draw, minimum width=1.5cm,
                     minimum height=0.8cm, node distance=1.5cm,
                     text centered, fill=blue!15]
\tikzstyle{phase} = [rectangle, draw, rounded corners, text
      width=2cm,minimum width=2.2cm, minimum height=1.3cm, text badly centered,
      node distance=2.3cm, inner sep=2pt, very thick, fill=blue!15]
\tikzstyle{mstyle}= [matrix,draw, fill=gray!80, rounded corners,
  column sep=10pt,row sep=10pt,inner sep=8pt]
\tikzstyle{nstyle}= [draw,fill=blue!15,shape=rectangle,rounded corners,inner sep=2pt]


% make an affinity between nodes
\newcommand{\mkaffinity}[3]{
  \path[affinity] (#1) -- node[mylabel] {$#3$} (#2);
}


% make a "leads-to arrow" with comment explaining the modification
\tikzstyle{changesinto} = [draw,-stealth,decorate,decoration={snake,amplitude=.4mm,segment length=2mm,post length=1mm}]

\newcommand{\mkchangesinto}[3]{
{
\scriptsize
  \path[changesinto] #1  -- #2 node[midway,above]{#3};
}
}

\tikzset{
  liverange/.style={draw,thick},
  non spilled/.style={ultra thick}
}
\newcommand{\mkliverange}[3]{
\path[liverange] #2 node[anchor=base,yshift=5pt] {#1} -- #3;
}

\tikzstyle{hole} = [draw,double,double distance=3pt]



%\newcommand{\color1}{red}
%\newcommand{\color2}{blue}
%\newcommand{\color3}{green}
%\newcommand{\color4}{magenta}
%\newcommand{\color5}{yellow}

%% colors takes from colorbrewer
\definecolor{cb}{HTML}{FF7F00}

\definecolor{cbJade}{HTML}{66c2a5}
% \definecolor{cbOrange}{HTML}{fc8d62}  % Fabrice has problems with colors starting with 'f'...
\definecolor{cbOrange}{RGB}{252,141,98}
\definecolor{cbBlue}{HTML}{8da0cb}
\definecolor{cbPink}{HTML}{e78ac3}
\definecolor{cbGreen}{HTML}{a6d854}
%\definecolor{cbYellow}{HTML}{ffd92f}
\definecolor{cbYellow}{RGB}{255,217,47}

\newcommand{\mycol}[1]{%
% \ifcase#1\or red\or blue\or green\or magenta\or yellow\else\bad\fi!70!black%
\ifcase#1\or cbJade\or cbOrange\or cbBlue\or cbPink\or cbGreen\or cbYellow\else\bad\fi%
}

%\newlength{dist}
\newdimen\dist

\newcounter{tmp}
\newcounter{tmpp}
\newcounter{xcount}
\newcounter{ycount}
\newcounter{step}
\newcounter{mysep}
\newcounter{angle}

\newcounter{p1}
\newcounter{p2}
\newcounter{p3}
\newcounter{p4}
\newcounter{p5}
\newcounter{p6}

\newif\iftemp


%%%%%%
% Pgfplots

%\tikzset{%my legend image/.style={
%\tikzset{legend image code/.style={\draw[bar width=0.8em,yshift=-0.2em,bar shift=0pt] plot coordinates {(0cm,0.8em)};}

\tikzset{
  /pgfplots/ybar/.append style={
    /pgfplots/legend image code/.code={\draw[##1,bar width=.8em,yshift=-0.2em,bar shift=0pt] plot coordinates {(0cm,0.8em)};},
  },
  /pgfplots/bar cycle list/.append style={/pgfplots/cycle list={%
    {blue,fill=blue!50!white,mark=none},%
    {red,fill=red!40!white,mark=none},%
    {brown!30!black,fill=brown!20!white,mark=none},%
    {black,fill=gray,mark=none},%
    }
  }
}



%% Tests
\newcommand\test[2][]{
  \setkeys{mytikz}{#1}
  \node[draw,color=\@color,\@shape] {#2};
}

\newcommand{\@dbboxcol}{}%
\define@key{dbbox}{color}{\renewcommand{\@dbboxcol}{#1}}%
\define@boolkey{dbbox}{labels}{}

\presetkeys
        {dbbox}
        {color=red,%
         labels=false,%
        }
        {}

%% this command makes compilation fail if not using tikz. Don't know why.

%\makeatletter
%\newcommand\dbbox[1][]{{\shortindexingoff%
%\setkeys{dbbox}{#1}
%\begin{scope}[every node/.style={}]
%\path[overlay,draw,color=\@dbboxcol] let \p1 = (current bounding box.south west),
%           \p2 = (current bounding box.north east)
%           in
%  (\p1) rectangle (\p2)
%  (\p1) node[below right] {\ifKV@dbbox@labels\p1\else\fi}
%           let
%           \n1 = {\x2-\x1},
%           \n2 = {\y2-\y1}
%           in
%         (\p2) node[above left] {\ifKV@dbbox@labels\x2,\y2, ++\n1,\n2\else\fi} 
%  ;
%%          (current bounding box.south west) rectangle (current bounding box.north east);%
%\end{scope}
%}}
%\makeatother
\newcommand\dbbox{%
  \draw (current bounding box.south west) rectangle (current bounding box.north 
  east);%
}

%%
% Command to increase the bounding box when using shadows as they are
% not taken into accound when computing the bb (see pgfmanual).
%%
\newcommand\increase@boundingbox[1]{%
  \path [use as bounding box] (current bounding box.south east) ++ (#1);%
}
\newcommand\increaseshadowboundingbox{%
  % \increase@boundingbox{.11,-.09}} %% classical shadows
  \increase@boundingbox{.19,-.17}} %% blurred shadows
\newcommand\increasebottomshadowboundingbox{%
  \increase@boundingbox{0,-.1}}
\newcommand\increaserightshadowboundingbox{%
  \increase@boundingbox{.1,0}}
\fi%of \if\dousetikz
