- I prefer to provide as soon as possible an example (of solution under SSA versus dense data-flow solution of a simple problem) to illustrate: 
  - the sparse property (main advantage of SSA versus data-flow)
  - the important notions: property space (lattice), propagation process (forward, backward, transfer function, merge --meet)

- I would prefer you do not spend a page on "property space (lattice)" and refer to a compiler book instead. An example is sufficient, just mention "lattice | partial order" to say that such formalism is used to prove convergence (with monotony) and to design general propagation engine. 

- sometimes you use the term flow graph (of the data-flow that can be def-use chains or CFG or reverse CFG, etc.) while you mean control flow graph. See annotations. Fernando propose the term "propagation graph" instead of your flow graph. I do agree

- There is a problem with your notion of SSA graph:
  - as outlined by Fernando this differs from the SSA graph described by the "graphs" chapter where nodes do include the corresponding operation (and not only the variable). I _do_ prefer to have the corresponding operation.
  - SSA graph is use->def chains _not_ def->use chains in general that are implicitly provided under SSA. def->use chains are not implicit and must be computed/updates. Even if this is cheap and simple this is not a given.
  - I do not like the term SSA graph that actually just refer to use->def chains. I prefer you do not use this term that is yet another notation (the less you use the better it is).

- I prefer not to see any citation in the text. Put all of them in the last section. Also every technical discussions that are not part of your solution and not described in details (such as end of 1.2.4) should be in the last section.

- Your propagation engine puts edges in the work lists. Why not puting nodes (target of the edges instead)? Indeed this would avoid considering several times (potentially as many as its number of predecessors) the same node. A marking process is also useful to avoid putting it several times in the worklist (a worklist behaves as an ordered set).

- Even if somehow conflicting with the chapter "SSI" I think we should keep the limitation paragraph roughly as it it (BTW, part 2 & 3 will be swapt so chapter propagation will appear before chapter SSI). Evailable expression can be handled by the SSI chapter by splitting variables at the uses and by not pruning the corresponding SSA. Still I see a limitation that you do not talk here: the property space is not anymore a property "per variable and per program point" but a property per expression and program point. SSA, SSI and other live-range splitting based representation are good for analysis that attach the information/property to the live-range/variable. For available expressions we cheat a little bit and things are not that clean as it could be for copy-propagation, value numbering, range etc. This might become worth if the property is a set of relations (such as a<b<c...).  

